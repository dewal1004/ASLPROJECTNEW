OBJECT Modification "Gen. Jnl.-Post Line"(Codeunit 12)
{
  OBJECT-PROPERTIES
  {
    Date=20210926D;
    Time=070035.040T;
    Modified=true;
    Version List=NAVW114.27;
    This code is to be Modified
  }
  PROPERTIES
  {
    Target="Gen. Jnl.-Post Line"(Codeunit 12);
  }
  CHANGES
  {
    { CodeModification  ;OriginalCode=BEGIN
                                        with GenJnlLine do begin
                                          if "Currency Code" = '' then begin
                                            Currency.InitRoundingPrecision;
                                            "Amount (LCY)" := Amount;
                                            "VAT Amount (LCY)" := "VAT Amount";
                                            "VAT Base Amount (LCY)" := "VAT Base Amount";
                                          end else begin
                                            Currency.Get("Currency Code");
                                            Currency.TestField("Amount Rounding Precision");
                                        #10..25
                                          end;
                                          exit(Currency."Amount Rounding Precision");
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..5
                                            if "Deferral Code" = '' then
                                              "VAT Base Amount (LCY)" := "VAT Base Amount";
                                        #7..28
                                      END;

                         Target=InitAmounts(PROCEDURE 186) }
    { CodeModification  ;OriginalCode=BEGIN
                                        SalesSetup.Get;
                                        with GenJnlLine do begin
                                          Cust.Get("Account No.");
                                        #4..23
                                          TempDtldCVLedgEntryBuf.Init;
                                          TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
                                          TempDtldCVLedgEntryBuf."CV Ledger Entry No." := CustLedgEntry."Entry No.";
                                          CVLedgEntryBuf.CopyFromCustLedgEntry(CustLedgEntry);
                                          TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,true);
                                          CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
                                        #30..52
                                          CustLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
                                          CustLedgEntry."Amount to Apply" := 0;
                                          CustLedgEntry."Applies-to Doc. No." := '';
                                          CustLedgEntry."Applies-to ID" := '';
                                          if SalesSetup."Copy Customer Name to Entries" then
                                            CustLedgEntry."Customer Name" := Cust.Name;
                                        #59..75
                                        end;

                                        OnAfterPostCust(GenJnlLine,Balancing,TempGLEntryBuf,NextEntryNo,NextTransactionNo);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..26
                                          TempDtldCVLedgEntryBuf. "Loan ID":="Loan ID"; //AAA Oct 2002
                                        #27..55
                                          CustLedgEntry."Loan ID":="Loan ID"; //AAA Oct 2002
                                        #56..78
                                      END;

                         Target=PostCust(PROCEDURE 12) }
    { CodeModification  ;OriginalCode=BEGIN
                                        PurchSetup.Get;
                                        with GenJnlLine do begin
                                          Vend.Get("Account No.");
                                        #4..23
                                          TempDtldCVLedgEntryBuf.Init;
                                          TempDtldCVLedgEntryBuf.CopyFromGenJnlLine(GenJnlLine);
                                          TempDtldCVLedgEntryBuf."CV Ledger Entry No." := VendLedgEntry."Entry No.";
                                          CVLedgEntryBuf.CopyFromVendLedgEntry(VendLedgEntry);
                                          TempDtldCVLedgEntryBuf.InsertDtldCVLedgEntry(TempDtldCVLedgEntryBuf,CVLedgEntryBuf,true);
                                          CVLedgEntryBuf.Open := CVLedgEntryBuf."Remaining Amount" <> 0;
                                        #30..54
                                          VendLedgEntry.CopyFromCVLedgEntryBuffer(CVLedgEntryBuf);
                                          VendLedgEntry."Amount to Apply" := 0;
                                          VendLedgEntry."Applies-to Doc. No." := '';
                                          VendLedgEntry."Applies-to ID" := '';
                                          if PurchSetup."Copy Vendor Name to Entries" then
                                            VendLedgEntry."Vendor Name" := Vend.Name;
                                        #61..73
                                        end;

                                        OnAfterPostVend(GenJnlLine,Balancing,TempGLEntryBuf,NextEntryNo,NextTransactionNo);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..26
                                          TempDtldCVLedgEntryBuf."Loan ID":="Loan ID"; //AAA Sept 2002
                                        #27..57
                                          VendLedgEntry."Loan ID" :="Loan ID";     //Yusuf Feb 2002
                                        #58..76
                                      END;

                         Target=PostVend(PROCEDURE 13) }
    { CodeModification  ;OriginalCode=BEGIN
                                        with GenJnlLine do begin
                                          BankAcc.Get("Account No.");
                                          BankAcc.TestField(Blocked,false);
                                        #4..22
                                          else
                                            BankAccLedgEntry.Amount := "Amount (LCY)";
                                          BankAccLedgEntry."Amount (LCY)" := "Amount (LCY)";
                                          BankAccLedgEntry.Open := Amount <> 0;
                                          BankAccLedgEntry."Remaining Amount" := BankAccLedgEntry.Amount;
                                          BankAccLedgEntry.Positive := Amount > 0;
                                        #29..97
                                          DeferralPosting("Deferral Code","Source Code",BankAccPostingGr."G/L Bank Account No.",GenJnlLine,Balancing);
                                          OnMoveGenJournalLine(BankAccLedgEntry.RecordId);
                                        end;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..25
                                          BankAccLedgEntry."DEPOSIT ID":="Deposit ID";//inserted pnk univision 14/3/2003
                                        #26..100
                                      END;

                         Target=PostBankAcc(PROCEDURE 14) }
    { Insertion         ;Target=PostFixedAsset(PROCEDURE 29);
                         InsertAfter=VATPostingSetup(Variable 1012);
                         ChangedElements=VariableCollection
                         {
                           GLReg@1114 : Record "G/L Register";
                         }
                          }
    { CodeModification  ;OriginalCode=BEGIN
                                        with GenJnlLine do begin
                                          InitGLEntry(GenJnlLine,GLEntry,'',"Amount (LCY)","Source Currency Amount",true,"System-Created Entry");
                                          GLEntry."Gen. Posting Type" := "Gen. Posting Type";
                                        #4..63
                                        TempGLEntryBuf."Entry No." := VATEntryGLEntryNo; // Used later in InsertVAT(): GLEntryVATEntryLink.InsertLink(TempGLEntryBuf."Entry No.",VATEntry."Entry No.")
                                        PostVAT(GenJnlLine,GLEntry,VATPostingSetup);

                                        FAJnlPostLine.UpdateRegNo(GLReg."No.");
                                        GenJnlLine.OnMoveGenJournalLine(GLEntry.RecordId);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..66
                                        GetGLReg(GLReg);
                                        FAJnlPostLine.UpdateRegNo(GLReg."No.");
                                        GenJnlLine.OnMoveGenJournalLine(GLEntry.RecordId);
                                      END;

                         Target=PostFixedAsset(PROCEDURE 29) }
    { CodeModification  ;OriginalCode=BEGIN
                                        OnBeforeInitGLEntry(GenJnlLine);

                                        if GLAccNo <> '' then begin
                                        #4..21
                                        GLEntry."Transaction No." := NextTransactionNo;
                                        GLEntry."G/L Account No." := GLAccNo;
                                        GLEntry."System-Created Entry" := SystemCreatedEntry;
                                        GLEntry.Amount := Amount;
                                        GLEntry."Additional-Currency Amount" :=
                                          GLCalcAddCurrency(Amount,AmountAddCurr,GLEntry."Additional-Currency Amount",UseAmountAddCurr,GenJnlLine);

                                        OnAfterInitGLEntry(GLEntry,GenJnlLine);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..24
                                        GLEntry."Maintenance Code":=GenJnlLine."Maintenance Code";                //AAA Feb 25,2003 Residence Mainte Record
                                        GLEntry."Gen. Bus. Posting Group":=GenJnlLine."Gen. Bus. Posting Group";  //AAA Dec 12,2003 Residence Mainte Record
                                        #25..29
                                      END;

                         Target=InitGLEntry(PROCEDURE 3) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if (DtldCVLedgEntryBuf."Amount (LCY)" = 0) and
                                           (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) and
                                           ((AddCurrencyCode = '') or (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
                                        then
                                          exit;

                                        AccNo := GetDtldCustLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,CustPostingGr,OriginalTransactionNo,true);
                                        DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Sale;
                                        PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,true);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..7
                                        PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,true);
                                      END;

                         Target=PostDtldCustLedgEntryUnapply(PROCEDURE 114) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if (DtldCVLedgEntryBuf."Amount (LCY)" = 0) and
                                           (DtldCVLedgEntryBuf."VAT Amount (LCY)" = 0) and
                                           ((AddCurrencyCode = '') or (DtldCVLedgEntryBuf."Additional-Currency Amount" = 0))
                                        then
                                          exit;

                                        AccNo := GetDtldVendLedgEntryAccNo(GenJnlLine,DtldCVLedgEntryBuf,VendPostingGr,OriginalTransactionNo,true);
                                        DtldCVLedgEntryBuf."Gen. Posting Type" := DtldCVLedgEntryBuf."Gen. Posting Type"::Purchase;
                                        PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,true);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..7
                                        PostDtldCVLedgEntry(GenJnlLine,DtldCVLedgEntryBuf,AccNo,AdjAmount,true);
                                      END;

                         Target=PostDtldVendLedgEntryUnapply(PROCEDURE 69) }
    { PropertyModification;
                         Target=PostApply(PROCEDURE 105).IsHandled(Variable 1014);
                         Property=Id;
                         OriginalValue=1014;
                         ModifiedValue=1114 }
    { CodeModification  ;OriginalCode=BEGIN
                                        if not (DtldCVLedgEntryBuf."Entry Type" in
                                                [DtldCVLedgEntryBuf."Entry Type"::"Payment Discount (VAT Excl.)",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)",
                                                 DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)"])
                                        then
                                          exit;

                                        DeductedVATBase := 0;
                                        TempVATEntry.Reset;
                                        TempVATEntry.SetRange("Entry No.",0,999999);
                                        TempVATEntry.SetRange("Gen. Bus. Posting Group",DtldCVLedgEntryBuf."Gen. Bus. Posting Group");
                                        #12..46
                                                    TempVATEntry.Rename(TempVATEntry."Entry No." + 1000000);
                                                end;
                                                TempVATEntry := VATEntrySaved;
                                                DeductedVATBase += TempVATEntry.Base;
                                              until TempVATEntry.Next = 0;
                                              for i := 1 to 3 do begin
                                                VATBaseSum[i] := 0;
                                        #54..65
                                              SummarizedVAT := true;
                                            end;
                                          until TempVATEntry.Next = 0;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..7
                                        #9..49
                                        #51..68
                                      END;

                         Target=ProcessTempVATEntry(PROCEDURE 87) }
    { CodeModification  ;OriginalCode=BEGIN
                                        if AddCurrencyCode = '' then
                                          exit;

                                        #4..9
                                        then begin
                                          GLEntry.Init;
                                          GLEntry.CopyFromGenJnlLine(GenJnlLine);
                                          GLEntry."External Document No." := '';
                                          GLEntry.Description :=
                                            CopyStr(
                                              StrSubstNo(
                                        #17..20
                                          GLEntry."Source No." := '';
                                          GLEntry."Job No." := '';
                                          GLEntry.Quantity := 0;
                                          GLEntry."Entry No." := NextEntryNo;
                                          GLEntry."Transaction No." := NextTransactionNo;
                                          if TotalAddCurrAmount < 0 then
                                        #27..41
                                        end;

                                        OnAfterHandleAddCurrResidualGLEntry(GenJnlLine,GLEntry2);
                                      END;

                         ModifiedCode=BEGIN
                                        #1..12
                                          GLEntry."External Document No." := 'xxxxx';     //AAA
                                          //GLEntry."External Document No." := '';
                                        #14..23
                                          //  GLEntry."Reason Code" := GenJnlLine."Reason Code";
                                          GLEntry."Gen. Bus. Posting Group":=GenJnlLine."Gen. Bus. Posting Group";  //aaa
                                          GLEntry."Reason Code" := 'YYYYY';   //aa
                                        #24..44
                                      END;

                         Target=HandleAddCurrResidualGLEntry(PROCEDURE 38) }
    { PropertyModification;
                         Target=InsertVATEntriesFromTemp(PROCEDURE 83).FirstEntryNo(Variable 1006);
                         Property=Id;
                         OriginalValue=1006;
                         ModifiedValue=1005 }
    { CodeModification  ;OriginalCode=BEGIN
                                        TempVATEntry.Reset;
                                        TempVATEntry.SetRange("Gen. Bus. Posting Group",GLEntry."Gen. Bus. Posting Group");
                                        TempVATEntry.SetRange("Gen. Prod. Posting Group",GLEntry."Gen. Prod. Posting Group");
                                        TempVATEntry.SetRange("VAT Bus. Posting Group",GLEntry."VAT Bus. Posting Group");
                                        TempVATEntry.SetRange("VAT Prod. Posting Group",GLEntry."VAT Prod. Posting Group");
                                        case DtldCVLedgEntryBuf."Entry Type" of
                                          DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                                            begin
                                              FirstEntryNo := 1000000;
                                              LastEntryNo := 1999999;
                                            end;
                                          DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                                            begin
                                              FirstEntryNo := 2000000;
                                              LastEntryNo := 2999999;
                                        #16..19
                                              LastEntryNo := 3999999;
                                            end;
                                        end;
                                        TempVATEntry.SetRange("Entry No.",FirstEntryNo,LastEntryNo);
                                        if TempVATEntry.FindSet then
                                          repeat
                                            VATEntry := TempVATEntry;
                                        #27..34
                                            LastEntryNo := TempVATEntry."Entry No.";
                                          until Complete or (TempVATEntry.Next = 0);

                                        TempVATEntry.SetRange("Entry No.",FirstEntryNo,LastEntryNo);
                                        TempVATEntry.DeleteAll;
                                      END;

                         ModifiedCode=BEGIN
                                        #1..6
                                           DtldCVLedgEntryBuf."Entry Type"::"Payment Discount Tolerance (VAT Excl.)":
                                        #8..11
                                           DtldCVLedgEntryBuf."Entry Type"::"Payment Tolerance (VAT Excl.)":
                                        #13..22
                                        #24..37
                                        TempVATEntry.DeleteAll;
                                      END;

                         Target=InsertVATEntriesFromTemp(PROCEDURE 83) }
  }
  CODE
  {

    BEGIN
    END.
  }
}

