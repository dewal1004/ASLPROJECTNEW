OBJECT Codeunit 50001 General Purpose Codeunit
{
  OBJECT-PROPERTIES
  {
    Date=20210926D;
    Time=070352.637T;
    Modified=true;
    Version List=HR Ver 1.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      LDay@1000000000 : Date;
      LCatRec@1000000001 : Record "Leave Categories NU*";
      Dy@1000000002 : Integer;
      Mth@1000000003 : Integer;
      Yr@1000000004 : Integer;
      DateRec2@1000000005 : Record Date;
      HolidayRec@1000000006 : Record Holidays;
      WkDay@1000000007 : Text[10];
      Cnt@1000000008 : Integer;
      TmpDate@1000000009 : Date;
      TempDate@1000000010 : Date;
      EDRec@1000000011 : Record "Payroll-E/D Codes.";

    [LineStart(453881)]
    PROCEDURE Parents2Components@2(SalesHeader@1000000000 : Record "Sales Header");
    VAR
      SalesLine@1000000001 : Record "Sales Line";
      ProductGroups@1000000002 : ARRAY [100] OF Code[20];
      g@1000000003 : Integer;
      i@1000000004 : Integer;
      j@1000000005 : Integer;
      ProductFound@1000000006 : Boolean;
      ItemRec@1000000007 : Record Item;
      ComponentsItems@1000000008 : ARRAY [100,10] OF Code[20];
    BEGIN
      {
      Assumptions:  - Not more than 100 Product group
                    - Not more than 10 components(Inventory product) per Product group
                      [productgroup][components]
      ComponentsItems[100][10]     // Final
      Componentsqty[100][10]
      }

      SalesLine.Reset;
      SalesLine.SetRange("Document Type",SalesHeader."Document Type");
      SalesLine.SetRange("Document No.",SalesHeader."No.");
      g := 0;
      repeat
       ProductFound := false;
       i := 1;
       while ((i<g) and not ProductFound) do
       begin
        if ProductGroups[i]=GetGroup(SalesLine."No.") then
          ProductFound := true;
        i:=i+1;
       end;
       if not ProductFound then begin
        g := g+1;
        ProductGroups[g] := GetGroup(SalesLine."No.");
       end;
      until SalesLine.Next = 0;

      for i:= 1 to g do begin  // For each product in (Load ?/return ?)
      ItemRec.SetCurrentKey("Product Group Code");
      ItemRec.SetRange(ItemRec."Product Group Code",ProductGroups[i]);
      ItemRec.SetRange(ItemRec."Assembly BOM",false);
      if ItemRec.Find('-') then begin
       j := 1;
       repeat
        ComponentsItems[i][j] := ItemRec."No.";
        j := j+1;
       until ItemRec.Next=0;
      end;

      end;
      Message('['+Format(g)+']');
    END;

    [LineStart(453924)]
    PROCEDURE Components2Parents@3(SalesHeader@1000000000 : Record "Sales Header");
    BEGIN
    END;

    [LineStart(453927)]
    PROCEDURE GetGroup@8(ItemNo@1000000000 : Code[20]) : Code[10];
    VAR
      ItemRec@1000000001 : Record Item;
    BEGIN
      ItemRec.Get(ItemNo);
      exit(ItemRec."Product Group Code");
    END;

    [LineStart(453931)]
    PROCEDURE ExplodeSalesHeader@1(SalesHeader@1000000000 : Record "Sales Header");
    VAR
      SalesLines@1000000001 : Record "Sales Line";
      ItemRec@1000000002 : Record Item;
    BEGIN
      SalesLines.SetCurrentKey("Document Type","Document No.",Explodedline);
      SalesLines.SetRange("Document Type",SalesHeader."Document Type");
      SalesLines.SetRange("Document No.",SalesHeader."No.");
      SalesLines.SetRange(Explodedline,true);
      if SalesLines.Find('-') then begin
      SalesLines.DeleteAll;
      end;

      SalesLines.Reset;
      SalesLines.SetRange("Document Type",SalesHeader."Document Type");
      SalesLines.SetRange("Document No.",SalesHeader."No.");

      if SalesLines.Find('-') then begin
      repeat
      if SalesLines.Type = SalesLines.Type::Item then begin
      ItemRec.Get(SalesLines."No.");
      ItemRec.CalcFields(ItemRec."Assembly BOM");
      if ItemRec."Assembly BOM" then
         SalesLines.Mark(true);
      end;
      until SalesLines.Next = 0;

      SalesLines.MarkedOnly(true);
      SalesLines.Find('-');

      repeat
      ExplodeSalesLine(SalesLines);
      until SalesLines.Next = 0;

      end;
    END;

    [LineStart(453963)]
    PROCEDURE ExplodeSalesLine@4(SalesLine@1000000000 : Record "Sales Line");
    VAR
      ToSalesLine@1000000001 : Record "Sales Line";
      FromBOMComp@1000000002 : Record "BOM Component";
      SalesHeader@1000000003 : Record "Sales Header";
      ItemTranslation@1000000004 : Record "Item Translation";
      Item@1000000005 : Record Item;
      ItemCheckAvail@1000000006 : Codeunit "Item-Check Avail.";
      UnitOfMeasureMgt@1000000007 : Codeunit "Unit of Measure Management";
      LineSpacing@1000000008 : Integer;
      NextLineNo@1000000009 : Integer;
      NoOfBOMComp@1000000010 : Integer;
    BEGIN
      SalesLine.TestField(SalesLine.Type,SalesLine.Type::Item);
      SalesLine.TestField(SalesLine."Quantity Shipped",0);
      SalesLine.TestField(SalesLine."Reserved Qty. (Base)",0);
      if SalesLine."Purch. Order Line No." <> 0 then
        Error(
          'The BOM cannot be exploded on the sales lines because it is associated with purchase order %1.',
          SalesLine."Purchase Order No.");

      SalesHeader.Get(SalesLine."Document Type",SalesLine."Document No.");
      FromBOMComp.SetRange("Parent Item No.",SalesLine."No.");
      NoOfBOMComp := FromBOMComp.Count;
      if NoOfBOMComp = 0 then
        Error(
          'Item %1 is not a bill of materials.',
          SalesLine."No.");

      // remove this line
      ///IF NOT CONFIRM('Do you want to explode the BOM?',FALSE) THEN
      ///  EXIT;

      ToSalesLine.Reset;
      ToSalesLine.SetRange("Document Type",SalesLine."Document Type");
      ToSalesLine.SetRange("Document No.",SalesLine."Document No.");
      ToSalesLine := SalesLine;
      if ToSalesLine.Find('>') then begin
        LineSpacing := (ToSalesLine."Line No." - SalesLine."Line No.") div (1 + NoOfBOMComp);
        if LineSpacing = 0 then
          Error('There is not enough space to explode the BOM.');
      end else
        LineSpacing := 10000;

      if SalesLine."Document Type" in [SalesLine."Document Type"::Order,SalesLine."Document Type"::Invoice] then begin
        ToSalesLine := SalesLine;
        FromBOMComp.SetRange(Type,FromBOMComp.Type::Item);
        FromBOMComp.SetFilter("No.",'<>%1','');
        if FromBOMComp.Find('-') then
          repeat
            FromBOMComp.TestField(Type,FromBOMComp.Type::Item);
            Item.Get(FromBOMComp."No.");
            ToSalesLine."Line No." := 0;
            ToSalesLine."No." := FromBOMComp."No.";
            ToSalesLine."Variant Code" := FromBOMComp."Variant Code";
            ToSalesLine."Unit of Measure Code" := FromBOMComp."Unit of Measure Code";
            ToSalesLine."Qty. per Unit of Measure" := UnitOfMeasureMgt.GetQtyPerUnitOfMeasure(Item,FromBOMComp."Unit of Measure Code");
            ToSalesLine."Outstanding Quantity" := Round(SalesLine."Quantity (Base)" * FromBOMComp."Quantity per",0.00001);
            if ToSalesLine."Outstanding Quantity" > 0 then
              ItemCheckAvail.SalesLineCheck(ToSalesLine);
          until FromBOMComp.Next = 0;
      end;

      ToSalesLine := SalesLine;
      //ToSalesLine.INIT;
      //ToSalesLine.Description := SalesLine.Description;
      //ToSalesLine."Description 2" := SalesLine."Description 2";
      //ToSalesLine.MODIFY;
      //ToSalesLine."Component Line" := FALSE;
      ToSalesLine.Modify;

      FromBOMComp.Reset;
      FromBOMComp.SetRange("Parent Item No.",SalesLine."No.");
      FromBOMComp.Find('-');
      NextLineNo := SalesLine."Line No.";
      repeat
        ToSalesLine.Init;
        NextLineNo := NextLineNo + LineSpacing;
        ToSalesLine."Line No." := NextLineNo;
        case FromBOMComp.Type of
          FromBOMComp.Type::" ":
            ToSalesLine.Type := ToSalesLine.Type::" ";
          FromBOMComp.Type::Item:
            ToSalesLine.Type := ToSalesLine.Type::Item;
          FromBOMComp.Type::Resource:
            ToSalesLine.Type := ToSalesLine.Type::Resource;
        end;
        if ToSalesLine.Type <> 0 then begin
          ToSalesLine.Validate("No.",FromBOMComp."No.");
          ToSalesLine.Validate("Variant Code",FromBOMComp."Variant Code");
          if ToSalesLine.Type = ToSalesLine.Type::Item then begin
            ToSalesLine."Drop Shipment" := SalesLine."Drop Shipment";
            Item.Get(FromBOMComp."No.");
            ToSalesLine.Validate(Quantity,
              Round(
                SalesLine."Quantity (Base)" * FromBOMComp."Quantity per" *
                UnitOfMeasureMgt.GetQtyPerUnitOfMeasure(Item,FromBOMComp."Unit of Measure Code") /
                ToSalesLine."Qty. per Unit of Measure",
                0.00001));
          end else
            ToSalesLine.Validate(Quantity,SalesLine."Quantity (Base)" * FromBOMComp."Quantity per");

        end;
        if SalesHeader."Language Code" = '' then
          ToSalesLine.Description := FromBOMComp.Description
        else
          if not ItemTranslation.Get(FromBOMComp."No.",FromBOMComp."Variant Code",SalesHeader."Language Code") then
            ToSalesLine.Description := FromBOMComp.Description;

          ToSalesLine."Location Code" := SalesLine."Location Code"; // Also copy location: Adam
          ToSalesLine.Explodedline := true;
          ToSalesLine.Insert;
      until FromBOMComp.Next = 0;

      Commit;
    END;

    [LineStart(454067)]
    PROCEDURE AfterPostSalesDeleteExplode@5(SalesHeader@1000000000 : Record "Sales Header");
    VAR
      SalesLineRec@1000000001 : Record "Sales Line";
    BEGIN
      // Added by Adam to delete exploded lines in case of posting error

      SalesLineRec.SetCurrentKey("Document Type","Document No.",Explodedline);
      SalesLineRec.SetRange(SalesLineRec."Document Type",SalesHeader."Document Type");
      SalesLineRec.SetRange(SalesLineRec."Document No.",SalesHeader."No.");
      SalesLineRec.SetRange(SalesLineRec.Explodedline,true);
      if SalesLineRec.Find('-') then begin
      SalesLineRec.DeleteAll;
      end;
    END;

    [LineStart(454078)]
    PROCEDURE IsHoliday@18(CheckDate@1000000000 : Date) : Boolean;
    BEGIN
      Dy  := Date2DMY(CheckDate,1);
      Mth := Date2DMY(CheckDate,2);
      Yr  := Date2DMY(CheckDate,3);

      DateRec2.Reset;
      HolidayRec.Reset;
      HolidayRec.SetRange(HolidayRec.Day,Dy);
      HolidayRec.SetRange(HolidayRec.Month,Mth);

      if HolidayRec.Count<>0 then
          exit(true)
      else
        begin
          DateRec2.SetRange(DateRec2."Period Type" ,0);
          DateRec2.SetRange(DateRec2."Period Start",CheckDate);
          if DateRec2.Find('-') then
            begin
              WkDay := DateRec2."Period Name";
              HolidayRec.Reset;
              HolidayRec.SetRange(HolidayRec."Day Of Week",WkDay);
              if HolidayRec.Count<>0 then
                exit(true)
              else
                exit(false);
            end
          else
            exit(false);
        end;
    END;

    [LineStart(454108)]
    PROCEDURE GetEndDate@7(StartD@1000000000 : Date;NoOfDays@1000000001 : Integer) : Date;
    BEGIN
      TmpDate := StartD - 1;
        Cnt := 0;
        repeat
          TmpDate := TmpDate + 1;
          if not(IsHoliday(TmpDate)) then   Cnt := Cnt + 1;
        until (Cnt = NoOfDays);
        exit(TmpDate);
    END;

    [LineStart(454117)]
    PROCEDURE GetStartDate@9(EndD@1000000000 : Date;NoOfDays@1000000001 : Integer) : Date;
    BEGIN
      TmpDate := EndD + 1;
        Cnt := 0;
        repeat
          TmpDate := TmpDate - 1;
          if not(IsHoliday(TmpDate)) then   Cnt := Cnt + 1;
        until (Cnt = NoOfDays);
        exit(TmpDate);
    END;

    [LineStart(454126)]
    PROCEDURE GetNoOfDays@12(StartD@1000000000 : Date;EndD@1000000001 : Date) : Integer;
    BEGIN
      TmpDate := StartD-1;
        Cnt := 0;
        repeat
          TmpDate := TmpDate + 1;
          if not(IsHoliday(TmpDate)) then   Cnt := Cnt + 1;
        until (TmpDate = EndD);
        exit(Cnt);
    END;

    [LineStart(454135)]
    PROCEDURE GetGrossED@10(SearchED@1000000000 : '" ","NSITF Employee","NSITF Employer","Gross Salary","Pension Employee","Pension Employer"') : Code[20];
    BEGIN
      EDRec.SetCurrentKey(EDRec."ED Type");
      EDRec.SetRange(EDRec."ED Type",SearchED);

      if EDRec.Find('-') then exit(EDRec."E/D Code");
    END;

    BEGIN
    END.
  }
}

